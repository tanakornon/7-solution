// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "pie-fire-dire/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// BeefService is an autogenerated mock type for the BeefService type
type BeefService struct {
	mock.Mock
}

// Summary provides a mock function with given fields: ctx
func (_m *BeefService) Summary(ctx context.Context) (domain.BeefSummary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Summary")
	}

	var r0 domain.BeefSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.BeefSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.BeefSummary); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.BeefSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBeefService creates a new instance of BeefService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeefService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BeefService {
	mock := &BeefService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
